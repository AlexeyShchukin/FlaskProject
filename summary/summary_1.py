# üü¶ –ó–ê–î–ê–ß–ê 1: Patient —Å alias –∏ default_factory
# –°–æ–∑–¥–∞—Ç—å –±–∞–∑–æ–≤—É—é –º–æ–¥–µ–ª—å –ø–∞—Ü–∏–µ–Ω—Ç–∞ —Å –∞–ª–∏–∞—Å–∞–º–∏ –¥–ª—è
# first_name –∏ last_name(CamelCase), –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –≤—Ä–µ–º–µ–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.
#
# –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
# –ü–æ–ª—è: first_name, last_name (–∞–ª–∏–∞—Å—ã: firstName, lastName)
# –ü–æ–ª–µ registration_time: –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ default_factory
# –í–∫–ª—é—á–∏—Ç—å populate_by_name = True
# –î–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –≤ json_schema_extra

# üü¶ –ó–ê–î–ê–ß–ê 2: –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º—ë–Ω —Å field_validator
# –î–æ–±–∞–≤–∏—Ç—å –æ—á–∏—Å—Ç–∫—É –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–µ–Ω–∏ –∏ —Ñ–∞–º–∏–ª–∏–∏. –ü—Ä–æ–≤–µ—Ä—è—Ç—å
# –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É —Å—Ç—Ä–æ–∫–∏.
#
# –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å @field_validator –¥–ª—è first_name –∏ last_name
# –£–¥–∞–ª—è—Ç—å –ø—Ä–æ–±–µ–ª—ã –ø–æ –∫—Ä–∞—è–º
# –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞—Ç—å –∫ TitleCase
# –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ‚Äî 2 —Å–∏–º–≤–æ–ª–∞

# üü¶ –ó–ê–î–ê–ß–ê 3: –í–æ–∑—Ä–∞—Å—Ç–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å model_validator
# –î–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ
# –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è —É –º—É–∂—á–∏–Ω 50+ –ª–µ—Ç.
#
# –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
# –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—è age: int, sex: str, cancer_exam_done: Optional[bool]
# –ï—Å–ª–∏ age > 30, —Ç–æ cancer_exam_done –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ True
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å @model_validator(mode='after') –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø–æ–ª–µ–π
# –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é –∏–º—ë–Ω

# üü¶ –ó–ê–î–ê–ß–ê 4: –í—Ä–∞—á –∫–∞–∫ –Ω–∞—Å–ª–µ–¥–Ω–∏–∫ Person
# –°–æ–∑–¥–∞—Ç—å –±–∞–∑—É –¥–ª—è –≤—Ä–∞—á–µ–π –∫–∞–∫ –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–æ–≤ Person. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏—Ü–µ–Ω–∑–∏–∏.
#
# –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
# –ë–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å Person —Å first_name, last_name, age
# –ü–æ–¥–∫–ª–∞—Å—Å Doctor —Å –ø–æ–ª—è–º–∏: specialization, license_id
# license_id –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å "MD-"
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å @field_validator –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ license_id


# üü¶ –ó–ê–î–ê–ß–ê 5: –í–ª–æ–∂–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å Address –≤ Patient
# –†–∞—Å—à–∏—Ä–∏—Ç—å –ø–∞—Ü–∏–µ–Ω—Ç–∞ –≤–ª–æ–∂–µ–Ω–Ω—ã–º –∞–¥—Ä–µ—Å–æ–º –∏ –¥–æ–±–∞–≤–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é ZIP-–∫–æ–¥–∞.
#
# –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
# –ú–æ–¥–µ–ª—å Address: city, street, zip_code
# –ú–æ–¥–µ–ª—å PatientWithAddress —Ä–∞—Å—à–∏—Ä—è–µ—Ç Patient, –¥–æ–±–∞–≤–ª—è–µ—Ç address: Address
# –ü—Ä–æ–≤–µ—Ä–∫–∞: zip_code ‚Äî —Ç–æ–ª—å–∫–æ 5 —Ü–∏—Ñ—Ä
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å @field_validator –≤–Ω—É—Ç—Ä–∏ –º–æ–¥–µ–ª–∏ Address

# üü¶ –ó–ê–î–ê–ß–ê 6: –í–∏–∑–∏—Ç –≤ –∫–ª–∏–Ω–∏–∫—É —Å alias_generator –∏ UUID
# –¶–µ–ª—å:
# –°–æ–∑–¥–∞—Ç—å –º–æ–¥–µ–ª—å –∫–ª–∏–Ω–∏—á–µ—Å–∫–æ–≥–æ –≤–∏–∑–∏—Ç–∞ —Å –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π ID –∏ –∞–ª–∏–∞—Å–æ–≤.
#
# –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
# –ü–æ–ª—è: visit_id (UUID —á–µ—Ä–µ–∑ default_factory), doctor_notes
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å alias_generator (snake_case ‚Üí camelCase)
# –ê–ª–∏–∞—Å doctor_notes ‚Üí notes
# –î–æ–±–∞–≤–∏—Ç—å populate_by_name, json_encoders, json_schema_extra

# üü¶ –ó–ê–î–ê–ß–ê 7: –£—Å–ª–æ–≤–Ω–∞—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ diagnoses
# –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —É—Å–ª–æ–≤–Ω—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é –ø–æ–ª—è last_glucose_level, –µ—Å–ª–∏
# —Å—Ä–µ–¥–∏ –¥–∏–∞–≥–Ω–æ–∑–æ–≤ –µ—Å—Ç—å –¥–∏–∞–±–µ—Ç.
#
# –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
# –ü–æ–ª—è: name, diagnoses: list[str], last_glucose_level: Optional[float]
# –ï—Å–ª–∏ "diabetes" –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ –¥–∏–∞–≥–Ω–æ–∑–æ–≤ ‚Üí last_glucose_level –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ
# –í–∞–ª–∏–¥–∞—Ü–∏—è —á–µ—Ä–µ–∑ @model_validator(mode='after')
# JSON-—Å—Ö–µ–º–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∏–º–µ—Ä

# üü¶ –ó–ê–î–ê–ß–ê 8: PatientWithInsurance —Å —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π UUID, Enum, Decimal, Path
#
# –°–æ–∑–¥–∞—Ç—å –º–æ–¥–µ–ª—å –ø–∞—Ü–∏–µ–Ω—Ç–∞ —Å –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π —Å—Ç—Ä–∞—Ö–æ–≤–∫–æ–π, –≤ –∫–æ—Ç–æ—Ä–æ–π
# –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–∏–ø—ã:
#
# UUID (–∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä)
# Enum (–ø–æ–ª)
# Decimal (–ª–∏–º–∏—Ç –ø–æ–∫—Ä—ã—Ç–∏—è)
# Path (–ø—É—Ç—å –∫ –ø–æ–ª–∏—Å—É PDF-—Ñ–∞–π–ª–∞)
# –í—Å—ë –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–æ –≤ JSON.

from datetime import datetime, timezone
from decimal import Decimal
from enum import StrEnum
from pathlib import Path
from uuid import UUID, uuid4
import re

from pydantic import BaseModel, ConfigDict, Field, field_validator, ValidationError, model_validator


class Address(BaseModel):
    street: str
    city: str
    zipcode: str

    @field_validator("zipcode")
    @classmethod
    def validate_zipcode(cls, value):
        if not value.isdigit() or len(value) != 5:
            raise ValidationError("Zipcode must be 5 digits")


class Patient(BaseModel):
    first_name: str = Field(alias="FirstName")
    last_name: str = Field(alias="LastName")
    created_at: datetime = Field(default_factory=lambda: datetime.now(timezone.utc))
    age: int
    sex: str
    cancer_exam_done: bool | None = None

    @field_validator("first_name", "last_name")
    @classmethod
    def validate_name(cls, value):
        value = value.strip().title()
        if len(value) < 2:
            raise ValidationError("Name must be at least 2 characters long")
        return value

    @model_validator(mode="after")
    @classmethod
    def validate_age(cls, model):
        if model.sex == "m" and model.age > 50:
            model.cancer_exam_done = True
        return model

    model_config = ConfigDict(
        str_strip_whitespace=True,
        populate_by_name=True,
        json_schema_extra={
            "description": "Create Patient Schema",
            "type": "object",
            "properties": {},
            "required": ["first_name", "last_name"],
            "additionalProperties": False
        }
    )


class Doctor(Patient):
    specialization: str
    license_id: str

    @field_validator("license_id")
    @classmethod
    def validate_license_id(cls, value):
        if not value.startswith("MD-"):
            raise ValidationError("License ID must start with MD-")
        return value


class PatientWithAddress(Patient):
    address: Address


def to_camel(string: str) -> str:
    return re.sub(r'_([a-zA-Z])', lambda m: m.group(1).upper(), string)


class ClinicVisit(BaseModel):
    visit_id: UUID = Field(default_factory=uuid4)
    doctor_notes: str = Field(..., alias='notes')

    model_config = ConfigDict(
        alias_generator=to_camel,
        populate_by_name=True,
        json_encoders={
            UUID: str
        },
        json_schema_extra={
            "example": {
                "visitId": "d3b07384-d9a8-4d32-bf25-98b0e4f2d72d",
                "notes": "–ü–∞—Ü–∏–µ–Ω—Ç –∂–∞–ª—É–µ—Ç—Å—è –Ω–∞ –≥–æ–ª–æ–≤–Ω—É—é –±–æ–ª—å."
            }
        }
    )


class PatientDiagnosis(BaseModel):
    name: str
    diagnoses: list[str]
    last_glucose_level: float | None = None

    @model_validator(mode="after")
    @classmethod
    def check_glucose_level_for_diabetes(cls, model):
        if "diabetes" in model.diagnoses:
            raise ValidationError("last_glucose_level is required if patient has diabetes")

    model_config = ConfigDict(
        json_schema_extra={
            "example": {
                "name": "John Doe",
                "diagnoses": ["diabetes", "hypertension"],
                "last_glucose_level": 5.8
            }
        }
    )


class Sex(StrEnum):
    male = "male"
    female = "female"


class PatientWithInsurance(BaseModel):
    id: UUID = Field(default_factory=uuid4)
    sex: Sex
    coverage_limit: Decimal
    policy_path: Path

    model_config = ConfigDict(
        json_encoders={
            UUID: str,
            Decimal: float,
            Path: str
        }
    )


if __name__ == '__main__':
    patient = Patient(first_name="  john", last_name=" doe ", age=55, sex="m")
    get_patient = Patient.model_validate_json(patient.model_dump_json())
    print(patient)
    print(get_patient)

    doctor = Doctor(
        first_name="Vasya",
        last_name="pupkin",
        age=55,
        sex="m",
        specialization="Chirurg",
        license_id="MD-45467892"
    )
    print(doctor)

    address = Address(street="street", city="NY", zipcode="68003")
    patient_with_address = PatientWithAddress(
        first_name="bob",
        last_name="marly ",
        age=55,
        sex="m",
        address=address
    )
    print(patient_with_address)

    patient_with_insurance = PatientWithInsurance(
        sex=Sex.male,
        coverage_limit=Decimal("10000.50"),
        policy_path=Path("/path/to/policy.pdf")
    )

    print(patient_with_insurance.model_dump_json())
